/***********************************************************
 スタイルシート Todo
 ***********************************************************/


/* セレクタ */
body{

}

/* クラス */
.matome{

  /*
      要素はborderに囲まれているイメージ。
      paddingを使った場合、その余白の内側でheightやwidthが有効となる
   */

  /**************************
  * 要素ブロック Todo
  **************************/
  display:inline;                         /* 横並び可能、余白変更不可 (例：aタグ、テキスト)*/
  display:inline-block;                   /* 横並び可能、余白変更可能  */
  display:block;                          /* 横並び不可 */
  display:none;                           /* 非表示 */


  /**************************
  * Flexbox Todo
  **************************/

  /* 要素を画面上の指定した位置に固定 */
  position:fixed;

  /* 横並びにしたい要素の親要素に設定 */
  display: flex;

  /* 親要素の幅に合わせて伸ばしたい要素に指定 */
  flex: auto;

  /* 子要素のサイズに応じて折り返す 折り返したい要素の親要素に指定
     要素自身には列数に応じたwidthを指定                       */
  flex-wrap: wrap;

  /* 子要素を上から下へ並べる 縦に並べたい要素の親要素に指定 */
  flex-direction: column;


  /**************************
  * 要素の枠線 Todo
  **************************/

  /* 要素に枠線をつける（太さ、種類、色 */
  border:2px solid #dee7ec;
  border:1px solid;                            /* 要素の枠線を黒にする （おすすめ）*/

  /* 要素の下枠に下線をつける（太さ、種類、色） */
  border-bottom:2px solid #dee7ec;

  /* 要素の角を丸くする、数字大ほど角が大 */
  border-radius:4px;

  /**************************
  * 要素の背景
  **************************/

  /* 要素の背景の色*/
  background-color: #f7f2b4;

  /* 要素の背景の色・透明度調節 */
  background-color: rgba(34, 49, 52, 0.9);

  /* 背景に画像を設定 */
  background-image:url("https://");

  /* 背景画像の繰り返し表示を防止 */
  background-size:cover;

  /* 透明度を設定(要素の中身全て対象)*/
  opacity:0.7;


  /**************************
  * 要素のサイズ
  **************************/

  height: 600px;
  width: 1140px;
  width:25%;                                  /* 親要素に対しての幅や高さを指定 */

  /* 画面幅拡大時での要素の幅の上限 Width（%）でその内幅調整*/
  max-width:1170px;
  width: 100%;                                /* スマホなどで画面幅が変わるように設定推奨 */

  /*行間を調整、要素の高さと同じで中央に位置 */
  line-height:65px;

  /**************************
   * 要素配置の指定
  **************************/

  position:relative;                          /* 親要素に指定 またボタン押下時も利用)*/
  position:absolute;                          /* 子要素に指定 親を基準として配置 */

  /* 親要素に対して設定 */
  top:90px;
  left:90px;
  right:90px;
  bottom:90px;

  /* 要素の重なりの順序を指定する (positionと併用必須) */
  z-index:1;                                  /* 値が大きいほど上に表示 */

  /* 文字 */
  color:#fff;                                 /* 文字色の変更 */
  font-size:32px;                             /* 文字サイズの変更 */
  letter-spacing:5px;                         /* 文字幅の変更 */
  font-weight:normal;                         /* 文字の濃さ (h3などが薄くなる) */

  /* リスト */
  list-style: none;                           /* 要素の黒点を取り除く */


  /**************************
   * 要素を並べる
  **************************/
  float:left;                                 /* 要素を横に並べる（左） */
  float:right;                                /* 要素を横に並べる（右） */


  /* 子要素が全てfloatでも、親要素が高さを持つように設定
      通常、親要素の高さは子要素を包む高さとなります。
      しかし、子要素が全てfloatの時、親要素の高さは0となってしまうという性質があります。
      これは、floatは「浮いている」という意味で、親要素から見るとfloatの子要素は存在しないように見えるからです。

      floatはclear: left;で「浮いている」状態を解除できます。
      ここではclear: left;を適用するためだけの空のタグを用意しましょう。
      空タグとclearでfloatを解除するのはよく使うテクニック
  */
  clear:left;


  /**************************
   * 要素の外側に余白
  **************************/

  /* 要素の外側に空白 */
  margin: 0 auto;                             /* 要素を中央に寄せる（上下は不可、必ずwidthと併用） */
  margin-right:40px;                          /* 要素の外側に余白を追加(右) */
  margin-bottom:50px;
  margin-top:30px;
  margin-left:40px;

  /**************************
 　* 要素の内側に余白
   **************************/

  padding:33px 20px 33px 20px;                /* 要素の内側に余白を追加（上、右、下、左） */
  padding:33px 20px;                          /* 要素の内側に余白を追加（上下、左右）    */
  padding-bottom:20px;                        /* 要素の内側に余白を追加 (下)    */
  padding-top:20px;
  padding-left:20px;
  padding-right:20px;

  /* 要素配置の指定（インライン、インラインブロック等、要素内部で有効） */
  text-align:center;
  text-align:right;
  text-align:left;

  /* カーソルを変更 */
  cursor:pointer;                             /* ポインタ（指の形） */
  cursor:text;
  cursor: default;

  /* ボックスの影 */
  box-shadow:0 7px #1a7940;                   /* 水平、垂直、色 (下に影)*/
  box-shadow:none;                            /* 影を消す （例：ボタン押下時）*/

  /* レイアウト崩れを直す
      box-sizingをborder-boxに指定すると、
      要素の幅(width)の合計にpaddingとborderが含まれるようになります。→ここ重要
      そのため、paddingやborderを追加した時に生じるレイアウト崩れを未然に防ぐことができます
      （※ただし、marginはborder-boxでの合計値に含まれません）。
  */
  box-sizing: border-box;                 /* 全要素にアスタリスクが推奨 */


}


/*****************************
 色の種類
 *****************************/
.background-color{
  background-color:#239b76;               /*  */
  background-color:#3b5998;               /* Facebook */
  background-color:#55acee;               /* Twitter */

  background-color: #f7f7f7;
}

.color{
  color:#fff;
  color:#ff4a4a;
}


/*******************************
 メディアクエリ
 ******************************/

/* パソコン向けレイアウト */
.item {
  width: 25%;
  float: left;
}

/* タブレット向けレイアウト */
@media(max-width: 1000px){
  .item {
    width: 50%;
  }
}

/* スマートフォン向けレイアウト */
@media(max-width: 670px){
  .item {
    width: 100%;
  }
}






/***********************************************************
 サンプル Todo
 ***********************************************************/

.btn{
  padding:8px 24px;
  color:white;
  display:inline-block;       /* aタグの場合は必須 */
  opacity:0.8;
}

/* 要素にカーソルを合わせた状態 */
.btn:hover{
  opacity:1;
}

/* ボタンを押している状態 */
.btn:active{
  position:relative;
  top:7px;
  box-shadow:none;
}

.header-right {
  float: right;
  background-color: rgba(255, 255, 255, 0.3);
  transition:all 0.5s;
}

.header-right:hover {
  background-color: rgba(255, 255, 255, 0.5);
}

.header-right a{
  line-height:65px;
  padding:0px 25px;
  color:white;
  display:block;
}

/**************************************************
 SASS
 **************************************************/

.main {

  margin: 20px;
  text-align: center;

  h3 {
    margin-bottom: 15px;
    color: #555;
  }

  .button {
    display: inline-block;
    padding: 8px 24px;
    color: white;
    opacity: 0.8;
    border-radius: 4px;
    background-color: #f778b8;
    cursor: pointer;
    box-shadow: 0 5px #e04893;

    //&で「button」を継承(.button:hover と同じ)
    &:hover{
      opacity:1;
    }

    &:active{
      position: relative;
      top: 7px;
      box-shadow: none;
    }

    //中にあるクラスは別で良い
    .current-page{
      color:#f74c90;
    }

    /*
      mixinとは、いくつかのコードを1つにまとめて、複数箇所で簡単に呼び出すことができる機能です。
      これにより、同じコードを何度も書く必要がなくなり、無駄なコードを省略することができます
     */


    /*
      便利な関数
     */
    darken();     // 色を暗くする （色、暗さ）
    lighten();    // 色を明るくする（色、明るさ）




  }
}
