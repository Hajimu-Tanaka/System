########################################
#頻出 Todo
########################################
git add .
git commit -m ""
git push origin master
(git push)

########################################
#Git初期設定 Todo
########################################
git config --global user.name "github user name"
git config --global user.email github@example.com"
git config --global core.editor "atom --wait"

git config --list #Git設定を確認

########################################
#.gitディレクトリの中身  Todo
########################################
ls -la .git

total 24
drwxr-xr-x   9 tanakahajimu  staff  288  7 12 14:55 .
drwxr-xr-x   3 tanakahajimu  staff   96  7 12 14:55 ..
-rw-r--r--   1 tanakahajimu  staff   23  7 12 14:55 HEAD
-rw-r--r--   1 tanakahajimu  staff  137  7 12 14:55 config #gitの設定ファイル
　→git addでインデックスファイルが保存されていく
-rw-r--r--   1 tanakahajimu  staff   73  7 12 14:55 description
drwxr-xr-x  14 tanakahajimu  staff  448  7 12 14:55 hooks
drwxr-xr-x   3 tanakahajimu  staff   96  7 12 14:55 info
drwxr-xr-x   4 tanakahajimu  staff  128  7 12 14:55 objects #リポジトリの本体
　→圧縮ファイル、ツリーファイル、コミットファイルが保存されていく
drwxr-xr-x   4 tanakahajimu  staff  128  7 12 14:55 refs


########################################
#　Github リポジトリ作成時の初期設定  Todo
########################################

# create a new repository on the command line
echo "# System" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M master
git remote add origin https://github.com/ログイン名/リポジトリ名.git
git push -u origin master

# push an existing repository from the command line
git remote add origin https://github.com/ログイン名/リポジトリ名.git
git branch -M master
git push -u origin master


########################################
#.gitコマンド  Todo
########################################

#Gitリポジトリのコピーを作成
git clone <リポジトリ名>　

#変更をステージに追加
git add <ファイル名、ディレクトリ名、.> 

#変更を記録する（コミット）
git commit
git commit -m "メッセージ"
git commit -v        #gitエディタが起動して、エディタ上でコメントをかける

#現在の変更履歴を確認する (癖づける)
git status

#変更差分を確認する(癖づける)
git diff             #git add前
git diff ファイル名    #git add前
git diff --staged    #git add後

#変更履歴を確認する
git log
git log --oneline       #一行で表示する
git log -p index.html   #ファイルの変更差分を表示
git log -n <コミット数>   #表示するコミット数を制限する

#ファイルの削除を記録する
git rm <ファイル名>
git rm -r <ディレクトリ名>
git rm --cached <ファイル名>   #ファイルを残したい時

#ファイルの移動を記録する
git mv <旧ファイル> <新ファイル>

#リモートリポジトリ（GitHub）を新規追加する
git remote add origin <リポジトリURL>

#リモートリポジトリ（GitHub）へ送信する
git push <リモート名> <ブランチ名>
git push origin master
git push -u origin master #初回だけやっておくだけで、git push だけで送信できるようになる

#コマンドにエイリアスをつける
git config --global alias.ci commit
git config --global alias.st status
git config --global alias.br branch
git config --global alias.co checkout

########################################
#変更の戻し方  Todo
########################################

#ファイルへの変更を取り消す
git checkout -- <ファイル名>
git checkout -- <ディレクトリ名>

#全ファイルを取り消す
git checkout -- .

「--」は、ブランチ名とファイル名が被ったときにどちらをさしているのかGitがわかるようにするため。

#ステージした変更を取り消す
git reset HEAD <ファイル名>
git reset HEAD <ディレクトリ名>

#全変更を取り消す
git reset HEAD

※指定した変更をステージから取り消すだけなので、
ワークツリーのファイルには影響ない

#直前のコミットをやり直す
git commit --amend

※リモートリポジトリにPushしたコミットはやり直したらダメ。


########################################
#GitHubとのやりとり  Todo
########################################

#リモートを表示する
git remote
git remote -v

#リモートリポジトリ（GitHub）を新規追加する
git remote add origin <リポジトリURL>
git remote add tutorial <リモートURL> #tutorialというショートカットでUrlのリモートリポジトリ登録

#リモートから取得する（フェッチ） → こちらを基本とするべき
リモートリポジトリ→ローカルリポジトリへ情報を取得する
git fetch <リモート名>
git fetch origin

git merge origin/master

#リモートから取得する（プル）
fetchからmergeまで一気に行う
git pull origin master

#リモートの詳細情報を表示する
git remote show <リモート名>
git remote show origin

#リモートを変更する
git remote rename <旧リモート名> <新リモート名>

#リモートを削除する
git remote rm <リモート名>


########################################
#ブランチ  Todo
########################################
・並行して複数機能を開発するためにあるのがブランチ
Aさんは１の機能の追加のためのブランチ、Bさんは２の機能の追加のためのブランチと作る
・ブランチを作るおかげで、他の人の変更分が自分へ影響がおよぶ心配がなくなる。
・ブランチはコミットを指したポインタ
・HEADとは、自分が今利用しているブランチを指し示しているポインタ
・コミットしたらブランチが指すコミットファイルが変わる
・コンフリクト防止１：複数人で同じファイルを変更しない
・コンフリクト防止２：pullやmergeする前に変更中の状態をなくしておく。(commitやstashをしておく)
・コンフリクト防止３：pullするときは、pullするブランチに移動してからpullする

#ブランチを新規追加する
git branch <ブランチ名>
git branch features

#ブランチの一覧を表示する
git branch
git branch -a    #すべてのブランチを表示する

#HEADがどのブランチを指しているかを確認できる
git log --oneline --decorate

#ブランチを切り替える
git checkout <既存ブランチ名>
git checkout feature

#ブランチを新規作成して切り替える
git checkout -b <新ブランチ名>

#変更をマージする
・マージとは、他の人の変更内容を取り込む作業
以下、作業中のブランチにマージする
git merge <ブランチ名>
git merge <リモート名/ブランチ名>
git merge origin/master

・マージには三種類ある
FatsForward：早送りマージ　→ ブランチが枝分かれシテいないとき、ブランチのポインタを進めるだけ
AutoMerge：基本的なマージ　→　枝分かれして開発した場合、マージコミットという新しいコミットを作る
コンフリクト

#コンフリクトを解決する
・同じファイルの同じ行に対して異なる編集を行ったとき

#ブランチ名を変更する(m:move)
git branch -m <ブランチ名>
git branch -m new_branch #今作業している

#ブランチを削除する
git branch -d <ブランチ名>    #masterにマージされていない、変更が残っているものは削除しない
git branch -d feature
git branch -D <ブランチ名>    #強制削除する


########################################
#ブランチを利用した開発の流れ  Todo
########################################
・masterブランチをリリース用ブランチ専用にする
・開発はトピックブランチを作成して進めるのが基本
・リモートブランチは<リモート>/<ブランチ>で参照できる
・プルリクエストは、自分の変更したコードをリポジトリに取り込んでもらえるよう依頼する機能


########################################
#GitHub Flow  Todo
########################################
・masterブランチは常にデプロイできる状態に保つ
・新開発はmasterブランチから新しいブランチを作成してスタート
・作成した新しいブランチ上で作業し、コミットする
・定期的にPUSHする
・masterにマージするためにプルリクエストを使う
・必ずレビューを受ける
・masterブランチにマージしたらすぐにデプロイする
→テストとデプロイ作業は自動化する

※※以下、github flowの流れ
#ワークツリーが最新かを確認する
・git status
・git branch
・git pull origin master
#新規ブランチを作成する
・git checkout -b <新規ブランチ名>
・プログラミング
・git diff
・git status
・git add <ファイル等>
・git commit -m <メッセージ>
・git push origin <今回作ったブランチ名>
・GithubでPullRequestを行う（base：master complare:新規ブランチ）
・Approveをもらったら、merge commitを行う
・Delete　Branchを押す
・GitHubからCIツール等を使って、テスト・デプロイを行う
・git pull origin master
・git checkout master
・git branch
・git branch -d <使っていたブランチ名>


########################################
#リベース  Todo
########################################
・変更を統合する際に、履歴をきれいに整えるために使うのがリベース
・ブランチの起点となるコミットを別のコミットに移動する
・内容を取り込むだけでなく、履歴も取り込む。
・GithubにプッシュしたコミットをリベースするのはNG
・git push -f は絶対NG

git rebase <ブランチ名>

※※以下、リベースの流れ
#先にブランチがあった場合
・git branch feature
#masterブランチで編集
・git status
・git branch
・git pull origin master
・git add .
・git commit -m "master2"
・git branch
#featureブランチの編集
・git checkout feature
・git br
・git add .
・git commit -m "feature2"
・git branch
#masterのFastFwardとして次の場所にコミットのポイントを指す
・git rebase master
・git log
#featureのマージし、master自身のコミットを次に合わせる
・git checkout master
・git merge feature
#リモートリポジトリに送信する
・git push origin master
#後片付けをする
・git branch
・git branch -d feature


########################################
#マージとリベースの使い分け  Todo
########################################
●マージ
・コンフリクトの解決が比較的簡単
・マージコミットがたくさんあると履歴が複雑化する
→作業の履歴を残したいならマージを使う

●リベース
・履歴をきれいに保つことができる
・コンフリクトの解決が若干面倒
（コミットそれぞれに解決が必要）
→履歴をきれいにしたいならリベースを使う

プッシュしていないローカルの変更にはリベースを使い、
プッシュした後はマージを使うこと。
コンフリクトしそうなら、マージを使うこと。
（チームで開発する場合は、プッシュしてプルリクエストでコンフリクトを確認する）



########################################
#プルの使い方  Todo
########################################
・プルにはマージ型とリベース型がある

#プルのマージ型
git pull <リモート名> <ブランチ名>
git pull origin master
→マージコミットが残るからマージしたという記録を残したい場合に使う

#プルのリベース型
git pull --rebase
git pull --rebase origin master
→マージコミットが残らないから、GitHubの内容を取得したいだけの時に使う

#プルをリベース型に設定する
git config --global pull.rebase true

#masterブランチでgit pullする時だけの場合
git config branch.master.rebase true

・コミットをきれいに整えてから、PUSHしたいときは履歴を書き換える
→GitHubにPUSHしていないコミットで使うこと。


#直前のコミットをやり直す(復讐)
git commit --amend
→リモートリポジトリにPushしたコミットはやり直しをしてはいけない

#複数のコミットをやり直す
git rebase -i <コミットID>
git rebase -i HEAD~3
→-iは--interactiveの略で、対話型リベースといい。やりとりしながら履歴変更できる。

########################################
#タグ付け  Todo
########################################
・コミットを参照しやすくするために、わかりやすい名前をつけるのがタグ。よくリリースポイントに使います。
・タグには注釈付き版と軽量版の二種類がある
・タグをリモートに送信するには、git pushコマンドで別途指定す

#タグの一覧を表示する
git tag

#パターンを指定してタグを表示
git tag -l "201705"

#タグを作成する(注釈付きタグ)
git tag -a [タグ名] -m "メッセージ"
git tag -a 20170520_01 -m "version 20170520_01"

#タグを作成する(軽量版タグ)
git tag [タグ名]
git tag 20170520_01

#後からタグ付けする
git tag [タグ名] [コミット名]
git tag 20170520_01 8a6cbc4

#タグのデータを表示する
タグのデータと関連付けられたコミットを表示する
git show [タグ名]
git show 20170520_01

#タグをリモートに送信する
git push [リモート名] [タグ名]
git push origin 20200714

#タグを一斉に送信する
git push origin --tags
--tagsを付けるとローカルにあっても、リモートリポジトリに存在しないタグを一斉に送信する

########################################
#スタッシュ（作業を一時待避）  Todo
########################################
・作業が途中でコミットしたくないけど、別のブランチで作業する必要があるときに、一時避難する

#作業を一時避難する (stash は隠すの意味)
git stash

#避難した作業を確認する
git stash list

#最新の作業を復元する
git stash apply

#ステージの状況も復元する
git stash apply --index

#特定の作業を復元する
git stash apply [スタッシュ名]
git stash apply stash@{0}

#最新の作業を削除する
git shash drop

#特定の作業を削除する
git stash drop [スタッシュ名]
git stash drop stash@{0}

#全作業を削除する
git shash clear


